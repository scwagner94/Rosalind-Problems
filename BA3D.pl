#!/usr/bin/perl
#Sean Wagner
#BA3D.pl
#de bruijn graph from a string problem, makes adjacency list

use	strict;
use	warnings;

#input list of dna
my $k = 12; #value of k
#the input string to make graph
my $dna = "CAAGTGTGTTGGGGACACAACAAGAGTTGCGTTGAGGCTTGGTTAGGTCGGCCTTTGTGCTCAGGACTCATATAAATTCCATGTCTCTTTGCATGGGTAAACACCTCCTATCGGGAAATTAATGGCCCAAGAAAGGGGGCCGACCTGTTATCCCGTTAAGGAAACTTGATTTTATGTCAAAGCTGGCCTTCTGTAAGGCGCCATCGCACGTAGATCTGGAGTCTTCAGGACGTTGAAACGTTAGCAAGCGGTACACTTAACGATTGAATCACTGACGTCTAGTTCCTTATATGGGAACGGCGTAAAACGGCCTGATGATAATAAGAACTGCTCGCACCTACAACACACCACTGTCTGCAAATCCGCTACCAATCGCAGCGTCGTCAGGACCTCGCGACCCCGTCTAGAAACCGGATGAATCCGACGCATTACGCACGCTCCTGTGGTTCGTTCCGCTGTTGGGTTCGCAGCTTCGTGCATTAGCCTTTGGGGGAGTAGTATATGTGACGTAAAATCACGAATCCAGGACATTTTCGAGAGAACACTGCTCAATGCGGATCTGCGCATAAGATAACTTAATTCGTACCAATGTTTTTCGCTATCGTCGACCTCCCTAGAGCGTGCCACGGGATATGTACACTCATATAAGAACTATTGGATCAAGTGGCAGATTGGCGCCCTCTGCCGGATCATGACGGTGCGAACTCCCCAAGTGAAGGGAGCTGCGGTTCAACTACTGGGACAAATGCAATCTGGTTCAAACGTTACCAGACTACAACGTTTGATTTCCCTTTTGCTCGTCCCTGCGACCTTTAGTTCCCCTTTTGGCCCCGTGGACCATCCGCATACGTACGATGTCACAATAACAAGGAAGATCCGTGTGGCCTACCGGATCCGGGTGGTTCTGCTTAATCATGCCCCGGTCGACTACAACGATCCATTCACCATATATATAGTTTGTATTCGAGGTCCAGTCATCAGGTTCGCCTTACACGTTGAGCTGCATCCTATCCTGTATGGTAAATAACAGTGTCTACGACTCGCCCTGTTATCCCTTGAAGGAAGCCTAGAGCGACTCAAGTGATTTACTGGATTATGAACTCACCTTCTTATCGTTGGGATACTTTAGCCAACTTCCTAGACAGTCAAGAAGTTAAGCACGGCAGCAGCGAAAGAGCGACGGAAGAAACTTAACGATATTTGAATCGACGCCGACCTGGCTCACACTTTAAAGGGAGCCCCTATTAACCAGATCGCATGTGGATACGCAACGTAATGCCTATCTTAGTCCAGTGACTTACTGAATAACCTTGCACTCACAGTGACTTTCTTAGTGTGGTAGAACATGCATCTGCAACACAGTGACTGGGGGCGACTATACGAGTAGAAAGGCCGAATCTAGCCGCTTAAATAGGAATTGTTCACATAACAACACCTACTTTTAAGTTACAGCCCGGATTCGGCGTTTTCCCGTCCTTCAGTAACTTTGAAGCAATTTCCTCGAAAATGACGACAAAAGATCAGCTTGCGCGTATGACGGATACCTCTATCATAGCGATATACTCCTACACGCGATACTGAACAAGGACGGGCACGGAAGTTATTGCCAATGATTAGTAGAAACCACTCCTGCTAGTTCAGTGCGATCCTCAGAGCCCGCTCTTTTCTAGGGTTCTGAGGCTGGGCAGGTCCGGCTCGAGGGGTTCGCCCGTCGGGTTCATCGCTACCGCACATGACGGCTGTTCCATGTGCGGATCTCAGCAAACTTTGTATTACTCCCCCTCATTCGCGCATGCAGTGGTACACAGACACTCACTGAACGAGATGTTGGCATACCCTCGAAGCGCCTCCCGACTGGCCGTCTTATGAACGCTCCACCAGTTGCACGAATATTTAGTCTTGTATAGTAATCAGAGCACGTATTAAACGGAGGCATCCGTAGCGTGCTCAATGATCTAGGCACTATAACCTGCATTGCGACTTTTTTCAGCATCCGTACA";
my %outputHash; #output list of values
#assembles the hash so that all points can be accessed
for(my $i = 0; $i <= length($dna) - $k + 1; $i++) {
  my $currentSub = substr($dna,$i,$k-1);
  $outputHash{$currentSub} = "";
}
#goes through and constructs the list of connections
for(my $i = 0; $i <= length($dna) - $k; $i++) {
  my $currentSub = substr($dna,$i,$k-1);
  my $connection = substr($dna,$i+1,$k-1);
  my $currString = $outputHash{$currentSub};
  $currString = $currString . $connection . ",";
  $outputHash{$currentSub} = $currString;
}
#sorts the keys for printing in order
my @keys = keys %outputHash;
@keys = (sort(@keys));
#goes through and prints the list
for my $key (@keys) {
    my $printList = $outputHash{$key};
    #ignores values that have no connections
    if ($printList ne "") {
      print $key . " -> ";
      $printList = substr($printList,0,-1); #removes extra comma
      print $printList,"\n";
    }
}
